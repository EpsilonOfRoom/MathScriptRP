//*This file contains a number of functions relevant to handling strings.
Hopefully the comments are intelligible! - Epsilon
Available to use under the GNU General Public License 3.0.
*//

//To add: handling for string lists, i.e. strings with commas separating words
//countCommas, uniquify, some conception of how tf uniquify works

alphabetStandard := {contains every standard character in the English alphabet; won't list here}
alphabetComplete := {unity of every alphabet package, there's a whole bunch of special characters I won't list}
ST := \bigcup_{i=1}^\infty alphabetComplete^i // set name stands for STring

Let s \in ST be a string.
strLength(s)=n :<=> s \in alphabetComplete^n

cat(s, t) := (s_1, s_2, ..., s_k, t_1, t_2, ..., t_l) // concatenation
cat(s_1, s_2, s_3, ..., s_n) := cat(...(cat(cat(s_1, s_2), s_3), ...), s_n)
\cat_{i=a}^{b} s_i := cat(s_a, s_{a+1}, s_{a+2}, ..., s_{b}) // to be engraved similarly to the sum, product or integral symbol

letter(s, p): ST \times \mathbb{N}_{\leq stringLength(s)} -> ST, (s, p) => s_p

substring(s, p_1, p_2) := cat(letter(s, p_1), letter(s, p_1+1), ..., letter(s, p_2))

findSubstring(s, s_{sub}): ST^2 -> \mathbb{N}^2, //finds the earliest instance of s_sub in s and returns its start- and endpoints
{(s, s_{sub}) => (min_{i \in [1, strLength(s)]} {i \in \mathbb{N} | substring(s, i, i+strLength(s_{sub})}) = substring(s_{sub}, 1, strLength(s_{sub}))}, that same number + strLength(s_{sub})),
if these two numbers exist and strLength(s_{sub}) \leq strLength(s)
{(0, 0) otherwise

dividerds(s):= i \in [1, strLength(s)] | letter(s, i) = "." or "/" //divider dot slash, used only in toDigit
primSDMap: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} \subseteq ST -> \mathbb{N}, I don't need to define this //converts string digits to numbers, might be a waste of space

toDigit(s): {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ".", "/", "-"}^n -> \mathbb{Q},
{0 if findSubstring(findSubstring(s, "/"), "/") \neq (0, 0)
or findSubstring(findSubstring(s, "."), ".") \neq (0, 0)
or if \exists i \in [1, strLength(s)]: letter(s, i) = "-", letter(s, i-1) \neq "-"
or if \exists i, j \in [1, strLength[s]: letter (s, i) = "/", letter(s, j) = "." //this throws out all undesirable cases that would produce odd results
Otherwise, \frac{toDigit(substring(s, 1, dividerds(s)-1))}{toDigit(substring(s, dividerds(s)+1, strLength(s)))}
if \exists i \in [1, strLength(s)]: letter(s, i) = "/"
Otherwise, toDigit(substring(s, 1, dividerds(s)-1)) + 10^{-strLength(substring(s, dividerds(s)+1, strLength(s))}*toDigit(substring(s, dividerds(s)+1, strLength(s))
if \exists i \ in [1, strLength(s)]: letter(s, i) = "." //this is a mouthful
Otherwise, \sum_{i=1}^strLength{i} 10^{strLength(s)-i} primSDMap(letter(s, i)) //after all the recursion, this is what actually creates numbers

digit(x, i):=\lfloor 10^{-i}x \rfloor - 10 \lfloor 10^{-i-1} //returns the i'th digit of x
highestDigit(x):={max_{i \in \mathbb{Z}}(digit(x, i) \neq 0) if x \neq 0, //highest nonzero digit
0 if x=0} //edge case, might mess with other stuff

toString(x, l):= cat(\cat_{i=max(0, highestDigit(x))}^{0} primSDMap^{-1}(digit(x, i)), ".", \cat_{i=0}^{-l} (primSDMap^{-1}(digit(x, i)))
//converts real numbers to limited strings. l says how many numbers after the comma should be preserved